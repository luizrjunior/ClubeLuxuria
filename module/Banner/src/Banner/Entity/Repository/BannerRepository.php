<?php

namespace Banner\Entity\Repository;

use Banner\Entity\BannerEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerRepository extends EntityRepository {

    public function verificarNomeExistente($param) {
        $banner = $this->createQueryBuilder('a')
                        ->innerJoin('a.idCliente', 'b')
                        ->andWhere('a.idCliente = :idCliente')
                        ->setParameter('idCliente', $param['idCliente'])
                        ->andWhere('a.dsBanner LIKE :dsBanner')
                        ->setParameter('dsBanner', $param['dsBanner'])
                        ->getQuery()->getOneOrNullResult();
        if (!is_null($banner)) {
            if ($param['idBanner'] != $banner->getIdBanner()) {
                return $banner;
            }
        }
        return false;
    }

    public function inserirBanner($param = array()) {
        $entity = new BannerEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarBanner($param = array()) {
        $entity = $this->getEntityManager()->getReference('Banner\Entity\BannerEntity', $param['idBanner']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function selecionarBanner($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarBannerBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarBannersPaginado($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaBanners($param);

        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);

        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);

        return $paginator;
    }

    private function criarConsultaBanners($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array('a.idBanner', 'a.tpBanner',
                    'a.dtInicio', 'a.dtFim', 'b.idCliente', 'b.noCliente'))
                ->from('Banner\Entity\BannerEntity', 'a')
                ->innerJoin('a.idCliente', 'b');
        if (!empty($param['noClientePsq'])) {
            $query->andWhere("b.noCliente LIKE :noCliente")
                    ->setParameter('noCliente', "%{$param['noClientePsq']}%");
        }
        if ($param['tpBannerPsq'] != "T") {
            $query->andWhere("a.tpBanner = :tpBannerPsq")
                    ->setParameter('tpBannerPsq', $param['tpBannerPsq']);
        }
        $query->addOrderBy('a.idBanner', 'DESC');
        return $query;
    }

    public function excluirBanner($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

}
