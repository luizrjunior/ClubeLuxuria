<?php

namespace Cliente\Entity\Repository;

use Cliente\Entity\ClienteUsuarioEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * ClienteUsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClienteUsuarioRepository extends EntityRepository
{
    
    public function inserirClienteUsuario($param = array()) 
    {
        $entity = new ClienteUsuarioEntity($param);
        
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }
    
    public function editarClienteUsuario($param = array()) 
    {
        $entity = $this->getEntityManager()->getReference('Cliente\Entity\ClienteUsuarioEntity', $param['idClienteUsuario']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);
        
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }
    
    public function excluirClienteUsuario($repository) 
    {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }
    
    public function selecionarClienteUsuario($id) 
    {
        $repository = $this->find($id);
        return $repository;
    }
    
    public function selecionarClienteUsuarioBy($param) 
    {
        $repository = $this->findBy($param);
        return $repository;
    }
    
    public function listarClientesUsuarios($param = array(), $pagina = 1, $itens = 10) 
    {
        $queryCreate = $this->criarConsultaClientesUsuarios($param);
        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);
        $adapter = new DoctrineAdapter($paginado);
        
        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        return $paginator;
    }
    
    private function criarConsultaClientesUsuarios($param = array()) 
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array(
            'usu.idCliente', 'usu.login', 'usu.apelido',
            'usu.email', 'usu.tipo', 'usu.situacao'))
            ->from('Cliente\Entity\ClienteEntity', 'usu');
        if (!empty($param['loginPsq'])) {
            $query->andWhere("usu.login LIKE :login")
                    ->setParameter('login', "{$param['loginPsq']}%");
        }
        if (!empty($param['emailPsq'])) {
            $query->andWhere("usu.email LIKE :email")
                    ->setParameter('email', "{$param['emailPsq']}%");
        }
        if ($param['tipoPsq'] != "T") {
            $query->andWhere("usu.tipo = :tipo")
                    ->setParameter('tipo', $param['tipoPsq']);
        }
        if ($param['situacaoPsq'] != "T") {
            $query->andWhere("usu.situacao = :situacao")
                    ->setParameter('situacao', $param['situacaoPsq']);
        }
        $query->addOrderBy('usu.login', 'ASC');
        $query->addOrderBy('usu.situacao', 'ASC');
        
        return $query;
    }

}