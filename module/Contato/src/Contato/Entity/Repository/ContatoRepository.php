<?php

namespace Contato\Entity\Repository;

use Contato\Entity\ContatoEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * ContatoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContatoRepository extends EntityRepository {

    public function inserirContato($param = array()) {
        $entity = new ContatoEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarContato($param = array()) {
        $entity = $this->getEntityManager()->getReference('Contato\Entity\ContatoEntity', $param['idContato']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function excluirContato($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

    public function selecionarContato($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarContatoBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarContatos($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaContatos($param);
        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);
        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        return $paginator;
    }

    private function criarConsultaContatos($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array(
                    'a.idContato', 'a.registrado', 'a.nome',
                    'a.email', 'a.assunto', 'a.status'))
                ->from('Contato\Entity\ContatoEntity', 'a');
        if (!empty($param['nomePsq'])) {
            $query->andWhere("a.nome LIKE :nome")
                    ->setParameter('nome', "{$param['nomePsq']}%");
        }
        if (!empty($param['emailPsq'])) {
            $query->andWhere("a.email LIKE :email")
                    ->setParameter('email', "{$param['emailPsq']}%");
        }
        $query->addOrderBy('a.idContato', 'DESC');

        return $query;
    }

}
