<?php

namespace AlbumFoto\Entity\Repository;

use AlbumFoto\Entity\FotoEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * FotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FotoRepository extends EntityRepository
{
    
    public function verificarFotoAlbumPrincipalExitente($param) {
        /**
         * @var $cache \AlbumFoto\Entity\FotoEntity
         */
        $cache = $this->createQueryBuilder('a')
            ->innerJoin('a.idAlbum', 'b')
            ->andWhere('a.idAlbum = :idAlbum')
            ->setParameter('idAlbum', $param['idAlbum'])
            ->andWhere('a.tpFoto = :tpFoto')
            ->setParameter('tpFoto', $param['tpFoto'])
            ->getQuery()->getOneOrNullResult();
        if (!is_null($cache)) {
            if ($param['idFoto'] != $cache->getIdFoto()) {
                return $cache;
            }
        }
        return false;
    }
    
    public function verificarNomeExistente($param) {
        /**
         * @var $cache \AlbumFoto\Entity\FotoEntity
         */
        $cache = $this->createQueryBuilder('a')
            ->innerJoin('a.idCliente', 'b')
            ->andWhere('a.idCliente = :idCliente')
            ->setParameter('idCliente', $param['idCliente'])
            ->andWhere('a.dsLegenda LIKE :dsLegenda')
            ->setParameter('dsLegenda', $param['dsLegenda'])
            ->getQuery()->getOneOrNullResult();
        if (!is_null($cache)) {
            if ($param['idFoto'] != $cache->getIdFoto()) {
                return $cache;
            }
        }
        return false;
    }
    
    public function inserirFoto($param = array()) {
        $entity = new FotoEntity($param);
        
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }
    
    public function editarFoto($param = array()) {
        $entity = $this->getEntityManager()->getReference('AlbumFoto\Entity\FotoEntity', $param['idFoto']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);
        
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }
    
    public function selecionarFoto($id) {
        $repository = $this->find($id);
        return $repository;
    }
    
    public function selecionarFotoBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }
    
    public function listarFotosPaginado($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaFotos($param);
        
        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);
        
        $adapter = new DoctrineAdapter($paginado);
        
        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        
        return $paginator;
    }
    
    public function listarFotos($param = array()) {
        $queryCreate = $this->criarConsultaFotos($param);
        $listaFotos = $queryCreate->getQuery()->getResult();

        return $listaFotos;
    }

    private function criarConsultaFotos($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array('a.idFoto', 'a.dsLegenda', 'a.tpFoto', 'a.dtCadastro',
            'a.dsArquivo', 'c.idCliente', 'b.idAlbum', 'b.noAlbum',
            'b.dsAlbum', 'b.dtCriacao'))
        ->from('AlbumFoto\Entity\FotoEntity', 'a')
        ->innerJoin('a.idAlbum', 'b')
        ->innerJoin('b.idCliente', 'c');
        if ($param['idClientePsq'] != "") {
            $query->andWhere("c.idCliente = :idClientePsq")
                    ->setParameter('idClientePsq', $param['idClientePsq']);
        }
        if ($param['tpAlbumPsq'] != "") {
            $query->andWhere("b.tpAlbum = :tpAlbumPsq")
                    ->setParameter('tpAlbumPsq', $param['tpAlbumPsq']);
        }
        $query->addOrderBy('b.idAlbum', 'DESC');
        $query->addOrderBy('a.idFoto', 'ASC');
        
//        echo '<pre>';
//        print_r($query->getQuery()->getSQL());
//        echo '<pre/>';
//        die();
        
        return $query;
    }

    public function excluirFoto($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }
    
}