<?php

namespace AlbumFoto\Entity\Repository;

use AlbumFoto\Entity\AlbumEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * AlbumRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlbumRepository extends EntityRepository {

    public function verificarNomeExistente($param) {
        /**
         * @var $cache \AlbumFoto\Entity\AlbumEntity
         */
        $cache = $this->createQueryBuilder('a')
                        ->innerJoin('a.idCliente', 'b')
                        ->andWhere('a.idCliente = :idCliente')
                        ->setParameter('idCliente', $param['idCliente'])
                        ->andWhere('a.noAlbum LIKE :noAlbum')
                        ->setParameter('noAlbum', $param['noAlbum'])
                        ->getQuery()->getOneOrNullResult();
        if (!is_null($cache)) {
            if ($param['idAlbum'] != $cache->getIdAlbum()) {
                return $cache;
            }
        }
        return false;
    }

    public function verificarAlbumPrincipalExitente($param) {
        /**
         * @var $cache \AlbumFoto\Entity\AlbumEntity
         */
        $cache = $this->createQueryBuilder('a')
                        ->innerJoin('a.idCliente', 'b')
                        ->andWhere('a.idCliente = :idCliente')
                        ->setParameter('idCliente', $param['idCliente'])
                        ->andWhere('a.tpAlbum = :tpAlbum')
                        ->setParameter('tpAlbum', $param['tpAlbum'])
                        ->getQuery()->getOneOrNullResult();
        if (!is_null($cache)) {
            if ($param['idAlbum'] != $cache->getIdAlbum()) {
                return $cache;
            }
        }
        return false;
    }

    public function inserirAlbum($param = array()) {
        $entity = new AlbumEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarAlbum($param = array()) {
        $entity = $this->getEntityManager()->getReference('AlbumFoto\Entity\AlbumEntity', $param['idAlbum']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function selecionarAlbum($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarAlbumBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarAlbumsPaginado($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaAlbums($param);

        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);

        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        
        return $paginator;
    }

     public function listarAlbums($param = array()) {
        $queryCreate = $this->criarConsultaAlbums($param);
        $listaAlbums = $queryCreate->getQuery()->getResult();

        return $listaAlbums;
    }

   private function criarConsultaAlbums($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array('a.idAlbum', 'a.noAlbum', 'a.stAlbum', 
                            'a.tpAlbum', 'a.dtCriacao', 'b.idCliente'))
                ->from('AlbumFoto\Entity\AlbumEntity', 'a')
                ->innerJoin('a.idCliente', 'b');
        if ($param['idClientePsq'] != "") {
            $query->andWhere("a.idCliente = :idClientePsq")
                    ->setParameter('idClientePsq', $param['idClientePsq']);
        }
        if ($param['tpAlbumPsq'] != "T") {
            $query->andWhere("a.tpAlbum = :tpAlbumPsq")
                    ->setParameter('tpAlbumPsq', $param['tpAlbumPsq']);
        }
        if ($param['stAlbumPsq'] != "T") {
            $query->andWhere("a.stAlbum = :stAlbumPsq")
                    ->setParameter('stAlbumPsq', $param['stAlbumPsq']);
        }
        if (!empty($param['noAlbumPsq'])) {
            $query->andWhere("a.noAlbum LIKE :noAlbumPsq")
                    ->setParameter('noAlbumPsq', "{$param['noAlbumPsq']}%");
        }
        $query->addOrderBy('a.idAlbum', 'DESC');

//        echo '<pre/>';
//        print_r($query->getQuery()->getSQL());
//        die();

        return $query;
    }

    public function excluirAlbum($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

}
