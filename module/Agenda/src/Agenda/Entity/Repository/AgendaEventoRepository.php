<?php

namespace Agenda\Entity\Repository;

use Agenda\Entity\AgendaEventoEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * AgendaEventoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgendaEventoRepository extends EntityRepository
{
    //Função que verifica se o código ja esá cadastrado
    //$dataHoje = data do dia atual no formato AAAA-MM-DD
    public function listaEventos($dataHoje){
        $select = $this->getEntityManager()->createQueryBuilder()
                  ->select(array('e.idEvento','e.stDisp','e.txTitulo','e.txDescricao','e.dtInicial','e.dtFinal','e.txtIdEvento'))
                  ->from('Agenda\Entity\AgendaEventoEntity', 'e')
                  ->where('e.dtFinal >= :dataHoje')
                  ->setParameter('dataHoje', $dataHoje);
        
        $qry = $select->getQuery();        
        $result = $qry->getResult();
        return $result;
    }//função para lista eventos
    
    //Verifica se já existe um ID randômico cadastrado no BD.
    //Caso não possua cadastrado retorna TRUE se já possuir retorna FALSE
    public function verificaIDRandomico($id){      
        $select = $this->getEntityManager()->createQueryBuilder()
                ->select(array('e.idEvento','e.stDisp','e.txTitulo','e.txDescricao','e.dtInicial','e.dtFinal','e.txtIdEvento'))
                ->from('Agenda\Entity\AgendaEventoEntity', 'e')
                ->where('e.txtIdEvento = :txtId')
                ->setParameter('txtId', $id);
        
        $qry = $select->getQuery();
        
        if(mysql_num_rows($qry->getResult()) <= 0){
            return true;
        }else{
            return false;
        }//if / else retorno da função
    }//verifica id randomico
    
    //Busca Eventos Pendentes
    public function listaEventosPendentes($dataHoje){
         $select = $this->getEntityManager()->createQueryBuilder()
                  ->select(array('e.idEvento','e.idUsuario','e.stDisp','e.txTitulo','e.txDescricao','e.dtInicial','e.dtFinal','e.txtIdEvento'))
                  ->from('Agenda\Entity\AgendaEventoEntity', 'e')
                  ->where('e.dtFinal >= :dataHoje')
                  ->setParameter('dataHoje', $dataHoje)
                  ->andWhere('e.stDisp = :situacao')
                  ->setParameter('situacao', '0')
                  ->orderBy('e.dtInicial','ASC');
         
        $qry = $select->getQuery();        
        $result = $qry->getResult();
        return $result;
    }//lista eventos pendentes
    
}//AgendaEventoRepository