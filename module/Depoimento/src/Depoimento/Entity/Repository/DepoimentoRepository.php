<?php

namespace Depoimento\Entity\Repository;

use Depoimento\Entity\DepoimentoEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * DepoimentoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepoimentoRepository extends EntityRepository {

    public function verificarDepoimentoExistente($param) {
        $data = date('d/m/Y H:i:s', strtotime("-15 days"));
        $depoimento = $this->createQueryBuilder('a')
            ->innerJoin('a.idCliente', 'b')
            ->andWhere('a.idCliente = :idCliente')
            ->setParameter('idCliente', $param['idCliente'])
            ->innerJoin('a.idUsuario', 'c')
            ->andWhere('a.idUsuario = :idUsuario')
            ->setParameter('idUsuario', $param['idUsuario'])
            ->andWhere('a.dtHrDepoimento > :dtHr15dias')
            ->setParameter('dtHr15dias', \DateTime::createFromFormat('d/m/Y H:i:s', $data))
            ->getQuery()->getOneOrNullResult();
        if (!is_null($depoimento)) {
            if ($param['idDepoimento'] != $depoimento->getIdDepoimento()) {
                return $depoimento;
            }
        }
        return false;
    }

    public function inserirDepoimento($param = array()) {
        $entity = new DepoimentoEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarDepoimento($param = array()) {
        $entity = $this->getEntityManager()->getReference('Depoimento\Entity\DepoimentoEntity', $param['idDepoimento']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function selecionarDepoimento($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarDepoimentoBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarDepoimentosPaginado($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaDepoimentos($param);

        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);

        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);

        return $paginator;
    }

    private function criarConsultaDepoimentos($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array('a.idDepoimento', 'a.stDepoimento', 'a.dsDepoimento', 
            'a.dtHrDepoimento', 'b.idCliente', 'c.idUsuario', 'c.login', 'c.tpUsuario'))
                ->from('Depoimento\Entity\DepoimentoEntity', 'a')
                ->innerJoin('a.idCliente', 'b')
                ->innerJoin('a.idUsuario', 'c');
        if ($param['idClientePsq'] != "") {
            $query->andWhere("b.idCliente = :idClientePsq")
                    ->setParameter('idClientePsq', $param['idClientePsq']);
        }
        if (isset($param['idUsuarioSelectPsqDepoimento'])) {
            if ($param['idUsuarioSelectPsqDepoimento'] != "T") {
                $query->andWhere("c.idUsuario = :idUsuarioPsq")
                        ->setParameter('idUsuarioPsq', $param['idUsuarioSelectPsqDepoimento']);
            }
        }
        if (!empty($param['dtInicioPsq'])) {
            $query->andWhere('a.dtHrDepoimento >= :dtInicioPsq')
            ->setParameter('dtInicioPsq', \DateTime::createFromFormat('d/m/Y', $param['dtInicioPsq']));
        }
        if (!empty($param['dtFimPsq'])) {
            $query->andWhere('a.dtHrDepoimento <= :dtFimPsq')
            ->setParameter('dtFimPsq', \DateTime::createFromFormat('d/m/Y', $param['dtFimPsq']));
        }
        $query->addOrderBy('a.idDepoimento', 'DESC');
        
//        echo '<pre>';
//        print_r($query->getQuery()->getSQL());
//        echo '<pre/>';
//        die();
        
        return $query;
    }

    public function excluirDepoimento($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

}
