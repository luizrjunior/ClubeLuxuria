<?php

namespace Caracteristicas\Entity\Repository;

use Caracteristicas\Entity\CaracteristicasEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * CaracteristicasRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CaracteristicasRepository extends EntityRepository {

    public function verificarCaracteristicaExistente($noCaracteristica, $idCaracteristica = null) {
        $user = $this->createQueryBuilder('u')
                        ->where('u.noCaracteristica LIKE :noCaracteristica')
                        ->setParameter('noCaracteristica', $noCaracteristica)->getQuery()->getOneOrNullResult();
        if (!is_null($user)) {
            if ($idCaracteristica != $user->getIdCaracteristica()) {
                return $user;
            }
        }
        return false;
    }

    public function inserirCaracteristica($param = array()) {
        $entity = new CaracteristicasEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarCaracteristica($param = array()) {
        $entity = $this->getEntityManager()->getReference('Caracteristicas\Entity\CaracteristicasEntity', $param['idCaracteristica']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function excluirCaracteristica($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

    public function selecionarCaracteristica($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarCaracteristicasBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarCaracteristicasPaginados($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaCaracteristicas($param);
        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);
        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        return $paginator;
    }

    public function listarCaracteristicas($param = array()) {
        $queryCreate = $this->criarConsultaCaracteristicas($param);
        $listaCaracteristicass = $queryCreate->getQuery()->getResult();
        return $listaCaracteristicass;
    }

    private function criarConsultaCaracteristicas($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array(
                    'a.idCaracteristica', 'a.noCaracteristica', 'a.tpCaracteristica'))
                ->from('Caracteristicas\Entity\CaracteristicasEntity', 'a');
        if (!empty($param['noCaracteristica'])) {
            $query->andWhere("a.noCaracteristica LIKE :noCaracteristica")
                    ->setParameter('noCaracteristica', "{$param['noCaracteristica']}%");
        }
        if ($param['tpCaracteristica'] != "T") {
            $query->andWhere("a.tpCaracteristica = :tpCaracteristica")
                    ->setParameter('tpCaracteristica', $param['tpCaracteristica']);
        }
        $query->addOrderBy('a.idCaracteristica', 'DESC');

//        echo '<pre>';
//        print_r($query->getQuery()->getSQL());
//        echo '<pre/>';
//        die();
        
        return $query;
    }

}
