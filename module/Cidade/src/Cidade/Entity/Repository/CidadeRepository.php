<?php

namespace Cidade\Entity\Repository;

use Cidade\Entity\CidadeEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * CidadeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CidadeRepository extends EntityRepository {

    public function verificarCidadeExistente($noCidade, $idCidade = null) {
        $user = $this->createQueryBuilder('u')
                        ->where('u.noCidade LIKE :noCidade')
                        ->setParameter('noCidade', $noCidade)->getQuery()->getOneOrNullResult();
        if (!is_null($user)) {
            if ($idCidade != $user->getIdCidade()) {
                return $user;
            }
        }
        return false;
    }

    public function inserirCidade($param = array()) {
        $entity = new CidadeEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarCidade($param = array()) {
        $entity = $this->getEntityManager()->getReference('Cidade\Entity\CidadeEntity', $param['idCidade']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function excluirCidade($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

    public function selecionarCidade($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarCidadeBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarCidadePaginados($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaCidade($param);
        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);
        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);
        return $paginator;
    }

    public function listarCidade($param = array()) {
        $queryCreate = $this->criarConsultaCidade($param);
        $listaCidades = $queryCreate->getQuery()->getResult();
        return $listaCidades;
    }

    private function criarConsultaCidade($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array(
                    'a.idCidade', 'a.noCidade', 'a.sgUf'))
                ->from('Cidade\Entity\CidadeEntity', 'a');
        if (!empty($param['noCidade'])) {
            $query->andWhere("a.noCidade LIKE :noCidade")
                    ->setParameter('noCidade', "{$param['noCidade']}%");
        }
        if ($param['sgUf'] != "T") {
            $query->andWhere("a.sgUf = :sgUf")
                    ->setParameter('sgUf', $param['sgUf']);
        }
        $query->addOrderBy('a.idCidade', 'DESC');

//        echo '<pre>';
//        print_r($query->getQuery()->getSQL());
//        echo '<pre/>';
//        die();
        
        return $query;
    }

}
