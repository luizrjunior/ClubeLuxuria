<?php

namespace Cache\Entity\Repository;

use Cache\Entity\CacheEntity;
use Doctrine\ORM\EntityRepository;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use Zend\Paginator\Paginator;
use Zend\Stdlib\Hydrator;

/**
 * CacheRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CacheRepository extends EntityRepository {

    public function verificarNomeExistente($param) {
        /**
         * @var $cache \Cache\Entity\CacheEntity
         */
        $cache = $this->createQueryBuilder('a')
                        ->innerJoin('a.idCliente', 'b')
                        ->andWhere('a.idCliente = :idCliente')
                        ->setParameter('idCliente', $param['idCliente'])
                        ->andWhere('a.noCache LIKE :noCache')
                        ->setParameter('noCache', $param['noCache'])
                        ->getQuery()->getOneOrNullResult();
        if (!is_null($cache)) {
            if ($param['idCache'] != $cache->getIdCache()) {
                return $cache;
            }
        }
        return false;
    }

    public function inserirCache($param = array()) {
        $entity = new CacheEntity($param);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function editarCache($param = array()) {
        $entity = $this->getEntityManager()->getReference('Cache\Entity\CacheEntity', $param['idCache']);
        (new Hydrator\ClassMethods())->hydrate($param, $entity);

        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush();

        return $entity;
    }

    public function selecionarCache($id) {
        $repository = $this->find($id);
        return $repository;
    }

    public function selecionarCacheBy($param) {
        $repository = $this->findBy($param);
        return $repository;
    }

    public function listarCachesPaginado($param = array(), $pagina = 1, $itens = 10) {
        $queryCreate = $this->criarConsultaCaches($param);

        $paginado = new ORMPaginator($queryCreate->getQuery());
        $paginado->setUseOutputWalkers(FALSE);

        $adapter = new DoctrineAdapter($paginado);

        $paginator = new Paginator($adapter);
        $paginator->setDefaultItemCountPerPage($itens);
        $paginator->setCurrentPageNumber($pagina);

        return $paginator;
    }

    private function criarConsultaCaches($param = array()) {
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select(array('a.idCache', 'a.noCache', 'a.dsCache', 'a.dsValor', 'b.idCliente'))
                ->from('Cache\Entity\CacheEntity', 'a')
                ->innerJoin('a.idCliente', 'b');
        if ($param['idClientePsq'] != "") {
            $query->andWhere("a.idCliente = :idClientePsq")
                    ->setParameter('idClientePsq', $param['idClientePsq']);
        }
        if (!empty($param['noCachePsq'])) {
            $query->andWhere("a.noCache LIKE :noCachePsq")
                    ->setParameter('noCachePsq', "{$param['noCachePsq']}%");
        }
        $query->addOrderBy('a.idCache', 'DESC');

//        echo '<pre/>';
//        print_r($query->getQuery()->getSQL());
//        die;

        return $query;
    }

    public function excluirCache($repository) {
        $this->getEntityManager()->remove($repository);
        $this->getEntityManager()->flush();
        return $repository;
    }

}
